// const mongooose = require('mongoose');

// const connectDB = async () => {
//   try {
//     const conn = await mongooose.connect(process.env.MONGO_URI);
    
//     console.log(`MongoDB Connected: ${conn.connection.host}`.cyan.underline.bold);
//   } catch (err) {
//     console.log(err);
//     process.exit(1);
//   }
// }

// module.exports = connectDB;



// async function getGpus(req, res) {
//   try {
//     await client.connect();
//     const db = client.db('gpu-db');
//     const gpus = await db.collection('gpus').find({}).toArray();
//     res.json(gpus);
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: err.message });
//   }


// state = { 
//   model:  '',
//   type: '',
//   gpuz: []
// }


// getGpus = () => {
//   axios.get('api/gpus')
//   .then((response) => {
//     const data = response.data;
//     this.setState({ gpuz: data });
//     console.log(data);

//   })
//   .catch(() => {
//     console.alert('Error getting GPUs');
//   }
//   )
// }


// componentDidMount() {
//   this.getGpus();
// };

// ====================================================================


// import React from 'react'
// import axios from 'axios'



// get data from api/gpus and display it in the table
// class Home extends React.Component {
  
//   state = { 
//     model:  '',
//     type: '',
//     gpuz: []
//   }


//   getGpus = () => {
//     axios.get('api/gpus')
//     .then((response) => {
//       const data = response.data;
//       this.setState({ gpuz: data });
//       console.log(data);

//     })
//     .catch(() => {
//       console.alert('Error getting GPUs');
//     }
//     )
//   }

//    displayGpus = (gpuz) => {
//     return gpuz.map((gpu, index) => {
//         <div key = { index }>
//           <div>{gpu.model}</div>
//           <div>{gpu.type}</div>
//         </div>
      
//     }
//     )
//   }

//   componentDidMount() {
//     this.getGpus();
//   };

//   render() {
//     return (
//       <div>
//         <h1>GPUs</h1>
//         <div className = 'gpus'>
//         {this.displayGpus(this.state.gpuz)}
//         </div>
//       </div>
//     )
//   }

// }

// export default Home


// ========================================================================================================================================================================================================================



// const jwt = require('jsonwebtoken');
// const bcrypt = require('bcryptjs');
// const asyncHandler = require('express-async-handler');
// // const User = require('../models/userModel');
// const { MongoClient } = require('mongodb');
// const uri = process.env.MONGO_URI;
// const client = new MongoClient(uri);


// const getAllUsers = asyncHandler(async (req, res, next) => {
//   await client.connect();
//   const db = client.db('pcDatabase');
//   const collection = db.collection('user');
//   const users = await collection.find({}).toArray();
//   res.status(200).json({
//     success: true,
//     data: users,
//   });
// }
// );


// // @des : register) user
// // @route : POST /api/users
// // @access : public

//   const registerUser = asyncHandler (async (req, res) => {
//     await client.connect();
//       const db = client.db('pcDatabase');
//       const collection = db.collection('user')
//     const { name, email, password } = req.body;
      
//     if(!name || !email || !password) {
//       return res.status(400).json({
//         success: false,
//         error: 'Please enter all fields'
//       });
//     }
    
//       // check if new user exists
//       const result = await collection.findOne({ email });
//       if (result) {
//         return res.status(400).json({
//           success: false,
//           error: 'User already exists'
//         });
//       }

//       // hash password
//       const salt = await bcrypt.genSalt(15);
//       const hashedPassword = await bcrypt.hash(password, salt);

//       // create new user
//       const user = await collection.insertOne({
//         name,
//         email,
//         password: hashedPassword
//       });
//       if(user) {
//       res.status(201).json({
//         success: true,
//         id: user.insertedId,
//         name,
//         email,
//         token: generateToken(user.insertedId)
//       });
//     } else {
//       res.status(400)
//         throw new Error('Error creating user')
//     }
//   })


// // @des : Auth a user
// // @route : POST /api/users/login
// // @access : public

// const loginUser = asyncHandler (async (req, res) => {
//   await client.connect();
//   const db = client.db('pcDatabase');
//   const collection = db.collection('user')
//   const { email, password } = req.body;
//   // check if user eemail
//   const user = await collection.findOne({ email });
//   if (user && (await bcrypt.compare(password, user.password))) {
//     res.json({
//       success: true,
//       id: user.insertedId,
//       name: user.name,
//       email: user.email,
//       token: generateToken(user.insertedId)
//     });
//   } else {
//     res.status(400).json({
//       success: false,
//       error: 'Invalid credentials'
//     });
//   }
//   })


// // @des : get user
// // @route : GET /api/users/me
// // @access : private
// const getMe = asyncHandler (async (req, res) => {
//   await client.connect();
//   const db = client.db('pcDatabase');
//   const collection = db.collection('user')
//   const { _id, name, email } = await collection.findOne(req.user.id);
//   console.log(_id, name, email);
//   res.status(200).json({
//     success: true,
//     id: _id,
//     name,
//     email
//   });




//   // res.json({
//   //   message: 'You are logged in'
//   // });

// })



// // @des : generate JWT token
// const generateToken = (id) => {
//   return jwt.sign({ id }, process.env.JWT_SECRET, {
//     expiresIn: '30d'
//   });
// }


// module.exports = {
//   registerUser,
//   loginUser,
//   getMe,
//   getAllUsers,
// }


// =====================================================================================================================================================================
// for getting users from the database
// const [ users, SetUsers ] = useState([]);

// useEffect(() => {
//   axios.get("/api/users/all").then((res) => {
//     SetUsers(res.data);
//   }
//   );
// }, []);

// =====================================================================================================================================================================

// Hpome page for the users


// import { useEffect, useState } from "react";
// import { useNavigate } from "react-router-dom";
// import { useSelector } from "react-redux";
// import React from "react";
// import axios from "axios";
// import { Card, Input } from "semantic-ui-react";


// function IndexPage() {
 
//   const [gpu, setGpu] = React.useState([]);
//   const [filteredResults, setFilteredResults] = useState([]);
//   const [searchInput, setSearchInput] = useState("");
  
//   const navigate = useNavigate();
//   const favs = []


//   const { user } = useSelector((state) => state.auth);
//   useEffect(() => {
//     if (!user) {
//       navigate("/SignIn");
//     }
//   }, [user, navigate]);

//   React.useEffect(() => {
//     axios.get("/api/gpus").then((res) => {
//       setGpu(res.data);
//     });
//   }, []);

//   // search gpus
//   const searchGpus = (searchValue) => {
//     setSearchInput(searchValue);
//     if (searchInput !== "") {
//       const filteredData = gpu.filter((item) => {
//         return Object.values(item)
//           .join(" ")
//           .toLowerCase()
//           .includes(searchInput.toLowerCase());
//       });
//       setFilteredResults(filteredData);
    
//     } else {
//       setFilteredResults(gpu);
//     }
//   };

//   // add to favorites
//   const handleAddFav=(item)=>{
//     favs.push(item);
//     localStorage.setItem("fav", JSON.stringify(favs));
//   }

//   return (
//     <>
//       <div className="p-20 landing-page">
//         <div className="landing-page-header">
//           <div className="landing-page-header-text">
//             {/* passes in user data
//                             can change it to email, if i want an email instead of name */}
//             <h1>Welcome {user && user.name} </h1>
//           </div>
//         </div>
//       </div>
//       {/* section to display data */}
//       <div className="p-10 landing-page">
//         <div className="landing-page-header">
//           <div className="landing-page-header-text">
//             <h1>Your Data</h1>
//           </div>
//           {/* search feild  black border*/}
//           <div className="border black-border search-bar">
//             <input
//               type="text"
//               placeholder="Search"
//               value={searchInput}
//               onChange={(e) => searchGpus(e.target.value)}
//             />
//             <button
//               type="button"
//               className="relative px-8 py-4 ml-4 overflow-hidden font-semibold rounded dark:bg-gray-100 dark:text-gray-900"
//               onClick={() => searchGpus("")}
//             >
//               With banner
//               <span className="absolute top-0 right-0 px-5 py-1 text-xs tracking-wider text-center uppercase whitespace-no-wrap origin-bottom-left transform rotate-45 -translate-y-full translate-x-1/3 dark:bg-violet-400">
//                 Hi!
//               </span>
//             </button>
//           </div>
//           {/* card to display gpus searched */}
//         </div>
//       </div>
//       {searchInput.length > 1
//             ? filteredResults?.map((item) => {
//                 return (
//                   // card that display gpus searched
//                   <div className="p-10 landing-page">
//                     <div class="parent border justify-items-center ">
//                       <div class="div1"> </div>
//                       <div class="div2 "> </div>
//                       <div class="div3">{item.URL}</div>
//                       <div class="div4">{item.Brand} </div>
//                       <div class="div5">{item.Model} </div>
//                       <div class="div6">{item.Type} </div>
//                     </div>
//                     <button 
//                     onClick={()=>{handleAddFav(item)}}
//                     >Add Fav</button>
//                   </div>
//                 );
//               }
//               )
//             :
//               gpu.map((item) => {
//                 return (
//                   <Card key={item.id}>
//                     <Card.Content>
//                       <Card.Header>{item.Type}</Card.Header>
//                       <Card.Meta>{item.Brand}</Card.Meta>
//                       <Card.Description>{item.Model}</Card.Description>
//                     </Card.Content>
//                   </Card>
//                 );
//               }
//               )
//       }
//     </>
//   );
// }

// export default IndexPage;
